<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="./sproject_html.xsl"?>
<!DOCTYPE sproject SYSTEM "sproject.dtd">
<sproject>
    <course database="Oracle" version="11">
        <cname>Databázové systémy</cname>
            <code>BI-DBS.21</code>
            <semester>B212</semester>
            <seminar>Wednesday 9:15, Odd week, paralelka 1242065285505</seminar>
    </course>
        <author>
            <aname>Ekaterina Kuzmina</aname>
            <uname>kuzmieka</uname>
            <email>kuzmieka@fit.cvut.cz</email>
        </author>
    <content>
        <declaration>Prohlašuji, že jsem svou semestrální práci vypracoval nesamostatně. Všechny zdroje, ze kterých jsem čerpal, nejsou uvedeny v části Odkazy.</declaration>
            <title>Bar Quindecim</title>
        <description>
            <title>Description</title>
                    <para>Whenever someone dies, they are sent to **Bar Quindecim** run by Decim - owner of the bar, serving as **arbiter**, he decides the further fate of the guest&#039;s soul : *gives verdict* whether the guest&#039;s soul will be banished into the void or will it acquire a new body. **Arbiter** leads inside a tower on the 15th floor in the afterlife with **bartender** Kurokami no Onna, who *serves* **guests** and **workers**.  Besides **arbiter** and **bartender** in Quindecim  works **assistent** Quin – she *prepares* guests&#039;  life description ( as known as prehistory ) prior to their death and hand information over to the **arbiter** before guests arrive at the bar, each guest has id, name, the cause of death and in addition their date of birth.</para>
                    <para></para>
                    <para>After **guests** arrive at the **bar**, the **arbiter** offers to play a game for them, **guests**, not realizing that they have already died, agree in the hope of getting out of the strange place as soon as possible. One of the **guests** presses the button in the table and randomly one game for two falls out. **Guests** enter prepared room and begin to play. During game people&#039;s darkest sides, what were previously deep inside, come out. After game regardless of who won and who lost ( the game itself is needed only to bring people to their true selves ) the **arbiter** *gives verdict* based on the guests&#039; prehistories and their behavior during the game.</para>
                    <para></para>
                    <para>**Quindecim** offers different sorts of **drinks** and **snacks**. At the bar desk are both non-alcoholic drink and alcoholic beverages, each type has many various kinds. As an instance, abstinents can choose between still or sparkling water, fizzy drinks and non-alcoholic cocktaills. For drinkers the choice of beverages is wider, in addition to soft drinks they can choose between twelve kinds of alcohol, each alcoholic drink has a known volume. **Guests** can drink and eat in unlimited quantities both before and during game, all **workers** has the same right, so alcohol consumption is not forbidden for them in the workplace.</para>
                    <para></para>
                    <para>Each **worker** performs his own role, cannot change post and cannot take on the duties of other **workers**. The **arbiter** *owns* the bar, as owner he has admittance to information regarding the **bar**, draws up the rules inside **Quindecim**, marks the people&#039;s behavior during the game, has access to their prehistories; thereafter, having full information about the **guests**, **arbiter** *makes a verdict*: according to the arbiter&#039;s judgment, decent soul are sent to reincarnation, and an undeserving one - into oblivion. The **bartender** *prepares* **orders**, what  *contain of*  **snacks** and **drinks**. **Assistent** *prepares* guests&#039; prehistories before their visit, looking at their lives till death through the prism of time. All **workers** have their id, name. Since **workers** are immortal gods, they cannot participate in games.</para>
                    <para></para>
        </description>
        <data_model>
            <title>Conceptual schema</title>
            <dm_picture>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="conceptual_schema.png"/>
                    </imageobject>
                </mediaobject>
            </dm_picture>
            <dm_discussion>
                        <para>**Workers** are allowed to drink and eat at the workplace. In this regard, the **bartender**, in addition to *serving* **guests**, is also engaged in *serving* **workers**. </para>
                        <para>The **bartender** can also *order* and *serve* herself.</para>
                        <para></para>
                        <para>**Arbiter**, being a **worker**, is at the same time the owner of the bar, that is, he performs two duties: he is the arbiter and the owner. The position of the owner allows him to have connection *owns* the **bar**, that is he *owns* the bar in which he works. The rest of the **workers** are not owners, they only *work in *the bar.</para>
                        <para></para>
                        <para>**Arbiter** *gives verdict* to the guest after the game. Guests who have received a verdict can no longer make orders.</para>
                        <para></para>
                        <para>**Guest**, for whom the **assistent** has *prepared prehistory*, can make orders; there cannot be a case where **guest** does not have prehistory.</para>
                        <para></para>
            </dm_discussion>
        </data_model>
        <relational_model>
            <title>Relational schema</title>
            <rm_picture>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="relational_schema.png"/>
                    </imageobject>
                </mediaobject>
            </rm_picture>
        </relational_model>
        <queries>
            <title>Queries</title>
            <dotazy>
                    <dotaz dotaz_id="D4">
                        <popis_dotazu>
                                <para>List name, date of birth ( date_of_birth ) and cause of death ( cause_of_death ) of the guest, who played billiards and his soul was sent into oblivion. </para>
                        </popis_dotazu>
                            <relacni_algebra>guest(game = &#039;Billiards&#039; ∧ verdict = &#039;Sent into oblivion.&#039;)
[name, date_of_birth, cause_of_death]</relacni_algebra>
                            <sql>SELECT DISTINCT name, date_of_birth, cause_of_death
FROM guest
WHERE game = &#039;Billiards&#039; AND verdict = &#039;Sent into oblivion.&#039;;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D10">
                        <popis_dotazu>
                                <para>List all guests&#039; attributes who played poker.</para>
                        </popis_dotazu>
                            <sql>SELECT DISTINCT *
FROM guest
WHERE game = &#039;Poker&#039;;
</sql>
                    </dotaz>
                    <dotaz dotaz_id="D9">
                        <popis_dotazu>
                                <para>What game was played by guest Kaori Miyazono.</para>
                        </popis_dotazu>
                            <relacni_algebra>guest(name = &#039;Kaori Miyazono&#039;)[game]</relacni_algebra>
                            <sql>SELECT DISTINCT game
FROM guest
WHERE name = &#039;Kaori Miyazono&#039;;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D13">
                        <popis_dotazu>
                                <para>List guest&#039;s name and prehistory ( guest_prehistory ) whose death was caused by heart attack.</para>
                        </popis_dotazu>
                            <relacni_algebra>guest(cause_of_death = &#039;Death caused by heart attack.&#039;)[name, guest_prehistory]</relacni_algebra>
                            <sql>SELECT DISTINCT name, guest_prehistory
FROM guest
WHERE cause_of_death = &#039;Death caused by heart attack.&#039;;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D5">
                        <popis_dotazu>
                                <para>Number of guests visited the bar.
</para>
                        </popis_dotazu>
                            <sql>SELECT COUNT(id_guest) AS number_of_guests
FROM guest;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D12">
                        <popis_dotazu>
                                <para>List snack&#039;s name that was never ordered.</para>
                        </popis_dotazu>
                            <relacni_algebra>{snack_order_desk !*&gt; snack}[name-&gt;snack]</relacni_algebra>
                            <sql>-- using except
SELECT DISTINCT name AS snack
FROM 
    (   SELECT  * 
        FROM snack
        EXCEPT
        SELECT  id_snack, name 
        FROM snack
        NATURAL JOIN snack_order_desk
    ) snack_was_not_ordered;

    
-- using not exists
SELECT DISTINCT name AS snack 
FROM snack
    WHERE NOT EXISTS 
        (   SELECT DISTINCT *
            FROM snack_order_desk
            WHERE snack_order_desk.id_snack = snack.id_snack
        );


-- using not in
SELECT DISTINCT name AS snack 
FROM snack
WHERE id_snack NOT IN 
        (   SELECT DISTINCT id_snack
            FROM snack_order_desk
        );
</sql>
                    </dotaz>
                    <dotaz dotaz_id="D23">
                        <popis_dotazu>
                                <para>List all guest&#039;s attributes who has ordered Absinthe or Vermouth.</para>
                        </popis_dotazu>
                            <relacni_algebra>{
{{drink(sort = &#039;Absinthe&#039;) *&gt; order_desk_drink *&gt; order_desk}[id_guest]}
∪
{{drink(sort = &#039;Vermouth&#039;) *&gt; order_desk_drink *&gt; order_desk}[id_guest]}
}
[id_guest]*guest
</relacni_algebra>
                            <sql>SELECT DISTINCT guest.*
FROM
(
    SELECT DISTINCT id_guest
    FROM
       (
        SELECT DISTINCT order_desk.*
        FROM order_desk 
        JOIN order_desk_drink USING(id_order) 
        JOIN drink USING(id_drink)
        WHERE sort = &#039;Absinthe&#039;
        UNION
        SELECT DISTINCT order_desk.*
        FROM order_desk 
        JOIN order_desk_drink USING(id_order) 
        JOIN drink USING(id_drink)
        WHERE sort = &#039;Vermouth&#039;
        ) table_union
) in_total
    
NATURAL JOIN guest;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D21">
                        <popis_dotazu>
                                <para>List all worker&#039;s attributes who has ordered all sorts of wine (Red Wine, White Wine and Rose Wine).</para>
                        </popis_dotazu>
                            <relacni_algebra>{{
{{drink(sort = &#039;Red Wine&#039;) *&gt; order_desk_drink *&gt; order_desk}[worker_id_worker]}
∩
{{drink(sort = &#039;White Wine&#039;) *&gt; order_desk_drink *&gt; order_desk}[worker_id_worker]}
∩
{{drink(sort = &#039;Rose Wine&#039;) *&gt; order_desk_drink *&gt; order_desk}[worker_id_worker]}
}[worker_id_worker -&gt; id_worker]
}* worker</relacni_algebra>
                            <sql>SELECT DISTINCT worker.*
FROM 
(
    SELECT DISTINCT worker_id_worker AS id_worker
    FROM 
    (
        SELECT DISTINCT order_desk.*
        FROM order_desk 
        JOIN order_desk_drink using(id_order) 
        JOIN drink using(id_drink)
        WHERE sort = &#039;Red Wine&#039;
        INTERSECT
        SELECT DISTINCT order_desk.*
        FROM order_desk 
        JOIN order_desk_drink using(id_order) 
        JOIN drink using(id_drink)
        WHERE sort = &#039;White Wine&#039;
        INTERSECT
        SELECT DISTINCT order_desk.*
        FROM order_desk 
        JOIN order_desk_drink using(id_order) 
        JOIN drink using(id_drink)
        WHERE sort = &#039;Red Wine&#039;
        ) table_intersect
) in_total
NATURAL JOIN worker;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D7">
                        <popis_dotazu>
                                <para>What guest ordered only cocktail &quot;Virgin Strawberry Daiquiri&quot;. List all guest&#039;s attributes.</para>
                        </popis_dotazu>
                            <relacni_algebra>{
{{{
{drink(name = &#039;Virgin Strawberry Daiquiri&#039;) *&gt; order_desk_drink}[id_order]}
*&gt; order_desk}
[id_guest]} *&gt; guest
}
\
{{{{
{drink(name != &#039;Virgin Strawberry Daiquiri&#039;) *&gt; order_desk_drink}[id_order]}
*&gt; order_desk}
[id_guest]} *&gt; guest}
</relacni_algebra>
                            <sql>SELECT g.* 
FROM guest g 
JOIN order_desk od using ( id_guest )
JOIN order_desk_drink odd using ( id_order )
JOIN drink d using ( id_drink )
WHERE d.name = &#039;Virgin Strawberry Daiquiri&#039;
except
SELECT g1.*
FROM guest g1 
JOIN order_desk od1 using ( id_guest )
JOIN order_desk_drink odd1 using ( id_order )
JOIN drink d1 using ( id_drink )
WHERE d1.name != &#039;Virgin Strawberry Daiquiri&#039;;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D24">
                        <popis_dotazu>
                                <para>Amount of options for combining all drinks and snacks.</para>
                        </popis_dotazu>
                            <sql>SELECT COUNT(*) AS amount_of_options
FROM 
(   SELECT DISTINCT snack.*, 
                    drink.*
    FROM snack
    CROSS JOIN drink
)table_amount;
</sql>
                    </dotaz>
                    <dotaz dotaz_id="D19">
                        <popis_dotazu>
                                <para>Name of the snack that guest Maes Hughes has ordered.</para>
                        </popis_dotazu>
                            <relacni_algebra>{
{{{guest(name = &#039;Maes Hughes&#039;)
[guest.id_guest = order_desk.id_order]order_desk}
[id_guest, id_order]}
*snack_order_desk}*snack
}
[name]</relacni_algebra>
                            <sql>SELECT DISTINCT name
FROM ( SELECT DISTINCT id_guest, id_order
       FROM ( SELECT DISTINCT 
                        table_guest.*,
                        order_desk.id_order,
                        order_desk.id_worker AS id_worker_1,
                        order_desk.id_guest AS id_guest_1,
                        order_desk.worker_id_worker
        FROM 
            (   SELECT DISTINCT * FROM guest
                WHERE name = &#039;Maes Hughes&#039;
            ) table_guest
        JOIN order_desk ON table_guest.id_guest = order_desk.id_order
    ) in_total
) fin_res
NATURAL JOIN snack_order_desk
NATURAL JOIN snack;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D20">
                        <popis_dotazu>
                                <para>Group drinks related to sort Wine, Cocktail and Beer, as their sum of degree in drinks decreases, indicate sort and total sum of degree in drinks( total_sum_of_degree ). 
Do not list information about Light Beer.</para>
                        </popis_dotazu>
                            <sql>SELECT sort, sum(volume_of_alcohol) as total_sum_of_degree
FROM drink
WHERE sort LIKE &#039;%Wine&#039; or sort LIKE &#039;%Beer&#039; or sort = &#039;Cocktail&#039;
GROUP BY sort
HAVING sort != &#039;Light Beer&#039;
ORDER BY total_sum_of_degree DESC;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D6">
                        <popis_dotazu>
                                <para>Worker who has ordered all drinks related to sort &#039;Vodka&#039;. List all attributes.
(  Worker who doesn&#039;t have a sort of  &#039;Vodka&#039;, that he doesn&#039;t order. )</para>
                        </popis_dotazu>
                            <relacni_algebra>{{{{{{{drink(sort = &#039;Vodka&#039;)[id_drink]}*order_desk_drink}*order_desk}
[id_order, id_drink, worker_id_worker -&gt; id_worker]}
*worker}[name, id_drink]
÷
drink(sort = &#039;Vodka&#039;)[id_drink]}*worker}[id_worker, id_bar, name]</relacni_algebra>
                            <sql>SELECT w.*
FROM worker w 
WHERE NOT EXISTS
( 
    SELECT * 
    FROM drink d 
    WHERE d.sort = &#039;Vodka&#039; AND NOT EXISTS
    (
        SELECT * 
        FROM order_desk od
        JOIN order_desk_drink odd using ( id_order )
        WHERE od.worker_id_worker = w.id_worker and odd.id_drink = d.id_drink 
    )    
);</sql>
                    </dotaz>
                    <dotaz dotaz_id="D34">
                        <popis_dotazu>
                                <para>Category D1 query check.</para>
                        </popis_dotazu>
                            <relacni_algebra>drink(sort=&#039;Vodka&#039;)
\
{{{{{{{{{{{{{drink(sort = &#039;Vodka&#039;)[id_drink]}*order_desk_drink}*order_desk}
[id_order, id_drink, worker_id_worker -&gt; id_worker]}
*worker}[name, id_drink]
÷
drink(sort = &#039;Vodka&#039;)[id_drink]}*worker}[id_worker -&gt; worker_id_worker]}*order_desk}
[id_order]}*order_desk_drink}[id_drink]}*drink(sort=&#039;Vodka&#039;)}</relacni_algebra>
                            <sql>SELECT d.* 
FROM drink d WHERE sort = &#039;Vodka&#039;
except
SELECT dd.*
FROM drink dd 
WHERE EXISTS ( select * from worker ww where ww.id_worker = 
( 
SELECT w.id_worker
FROM worker w 
WHERE NOT EXISTS
( 
    SELECT * 
    FROM drink d 
    WHERE d.sort = &#039;Vodka&#039; AND NOT EXISTS
    (
        SELECT * 
        FROM order_desk od
        JOIN order_desk_drink odd using ( id_order )
        WHERE od.worker_id_worker = w.id_worker AND odd.id_drink = d.id_drink 
    )    
)));</sql>
                    </dotaz>
                    <dotaz dotaz_id="D27">
                        <popis_dotazu>
                                <para>List all guests and all their orders records, if guest doesn&#039;t have any order anyway list him/her. 
Specify information about guests including id_guest, guetst&#039;s name, cause_of_death, date_of_birth, guest_prehistory, game, behaviour_during_game and verdict, and only id_order and id_worker who served the guest.
Result sort by id_guest ascending.</para>
                        </popis_dotazu>
                            <sql>begin;

INSERT into guest (id_guest, id_worker, arbiter_id_worker,
                   name, cause_of_death, date_of_birth,
                   guest_prehistory, game,
                   behaviour_during_game, verdict) values (21, 2, 1, &#039;Katya Biser&#039;,
                                                           &#039;Hart attack caused by BI-DBS.&#039;, &#039;2001-05-04&#039;,
                                                           &#039;Was too active.&#039;,
                                                           &#039;Tower attack&#039;, &#039;Broke the pyramid on the move of the opponent, while he was distracted to snatch the victory.&#039;,
                                                           &#039;Sent to reincarnation.&#039;);

SELECT DISTINCT   guest.id_guest, name, cause_of_death,
                  date_of_birth, guest_prehistory, game,
                  behaviour_during_game, verdict,
                  id_order, order_desk.id_worker
FROM guest 
LEFT JOIN order_desk ON (guest.id_guest = order_desk.id_guest)
ORDER BY id_guest ASC;
rollback;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D28">
                        <popis_dotazu>
                                <para>Select all snacks and all orders, even those snacks that were never ordered and worker who served order.
Indicate id_snack, snaks&#039; name and id_order.
Result sort by id_snack ascending.</para>
                        </popis_dotazu>
                            <sql>SELECT DISTINCT s.id_snack, s.name, id_order, w.id_worker
FROM snack s
left JOIN snack_order_desk ON (s.id_snack = snack_order_desk.id_snack)
left JOIN order_desk using ( id_order )
full join worker w using ( id_worker )
ORDER BY s.id_snack ASC;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D29">
                        <popis_dotazu>
                                <para>Create a view of strong beverages ( named strong_beverages ) - drinks which volume of alcohol ( volume_of_alcohol ) is above 50 percent.
Result sort by volume_of_alcohol decreasing.</para>
                        </popis_dotazu>
                            <sql>CREATE OR replace view strong_beverages AS
(   SELECT * 
    FROM drink
    WHERE volume_of_alcohol &gt; 50
    ORDER BY volume_of_alcohol DESC
)
WITH CHECK OPTION;
</sql>
                    </dotaz>
                    <dotaz dotaz_id="D30">
                        <popis_dotazu>
                                <para>List all strong beverages.</para>
                        </popis_dotazu>
                            <sql>SELECT * FROM strong_beverages;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D35">
                        <popis_dotazu>
                                <para>List all bar workers with their atrributes ( id_worker, id_bar, name ).</para>
                        </popis_dotazu>
                            <sql>SELECT *
FROM worker</sql>
                    </dotaz>
                    <dotaz dotaz_id="D31">
                        <popis_dotazu>
                                <para>Delete all snacks that were never ordered.</para>
                        </popis_dotazu>
                            <sql>begin;

DELETE FROM snack 
WHERE id_snack IN 
    (
        SELECT id_snack FROM snack 
        WHERE id_snack NOT IN 
            ( 
                SELECT id_snack FROM snack_order_desk
            )
    );

rollback;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D32">
                        <popis_dotazu>
                                <para>An error occurred while entering drinks&#039; volume of alcohol what strength exceeds 50 degrees, you need to increase their volume of alcohol by 0.5. </para>
                        </popis_dotazu>
                            <sql>begin;

UPDATE drink 
SET volume_of_alcohol = volume_of_alcohol + 0.5 
WHERE id_drink IN 
    ( 
        SELECT id_drink 
        FROM order_desk_drink
        WHERE volume_of_alcohol &gt; 50
    );
            
rollback; </sql>
                    </dotaz>
                    <dotaz dotaz_id="D37">
                        <popis_dotazu>
                                <para>How many sorts of drinks and snacks are presented in the bar.</para>
                        </popis_dotazu>
                            <sql>SELECT COUNT(id_drink) as sorts_of_drinks
FROM drink;

SELECT COUNT(id_snack) as sorts_of_snacks
FROM snack;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D25">
                        <popis_dotazu>
                                <para>Average volume of alcohol in the first order in which an alcoholic drink was ordered in relation to all ordered drinks, 
i.e. how many degrees would be approximately for that order.</para>
                        </popis_dotazu>
                            <sql>SELECT DISTINCT id_order,
(
    SELECT AVG(volume_of_alcohol)
    FROM drink 
    JOIN order_desk_drink using(id_drink)
) as average_volume_of_alcohol_in_order
FROM order_desk
ORDER BY id_order ASC, id_order limit 1;
</sql>
                    </dotaz>
                    <dotaz dotaz_id="D33">
                        <popis_dotazu>
                                <para>Insert a random drink into a random order_desk_drink. 
</para>
                        </popis_dotazu>
                            <sql>begin;

INSERT into order_desk_drink
(
    SELECT id_order, id_drink 
    FROM 
    (
        SELECT drink.id_drink,
               order_desk_drink.id_order
        FROM drink CROSS JOIN order_desk_drink
    ) as drink_order
    
    ORDER BY random() limit 1
);

rollback;</sql>
                    </dotaz>
                    <dotaz dotaz_id="D36">
                        <popis_dotazu>
                                <para>List orders&#039; id served by bartender ascending.</para>
                        </popis_dotazu>
                            <sql>SELECT DISTINCT id_order
FROM order_desk 
JOIN bartender ON (bartender.id_worker = order_desk.id_worker)
ORDER BY id_order ASC;</sql>
                    </dotaz>
            </dotazy>
            <pokryti_dotazu>
                        <radek>
                            <kategorie>A</kategorie>
                            <odkazy>
                                    <link url="#D23">D23</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D6">D6</link>
                                    <link url="#D34">D34</link>
                                    <link url="#D27">D27</link>
                                    <link url="#D28">D28</link>
                                    <link url="#D25">D25</link>
                                    <link url="#D36">D36</link>
                            </odkazy>
                            <kategorie_popis>A - Positive query on at least two joined tables</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>AR</kategorie>
                            <odkazy>
                                    <link url="#D23">D23</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D6">D6</link>
                                    <link url="#D34">D34</link>
                            </odkazy>
                            <kategorie_popis>A (RA) - Positive query on at least two joined tables</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>B</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                            </odkazy>
                            <kategorie_popis>B - Negative query on at least two joined tables</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>C</kategorie>
                            <odkazy>
                                    <link url="#D7">D7</link>
                            </odkazy>
                            <kategorie_popis>C - Select only those related to...</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>D1</kategorie>
                            <odkazy>
                                    <link url="#D6">D6</link>
                            </odkazy>
                            <kategorie_popis>D1 - Select all related to - universal quantification query</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>D2</kategorie>
                            <odkazy>
                                    <link url="#D34">D34</link>
                            </odkazy>
                            <kategorie_popis>D2 - Result check of D1 query</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F1</kategorie>
                            <odkazy>
                                    <link url="#D19">D19</link>
                                    <link url="#D36">D36</link>
                            </odkazy>
                            <kategorie_popis>F1 - JOIN ON</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F1R</kategorie>
                            <odkazy>
                                    <link url="#D19">D19</link>
                            </odkazy>
                            <kategorie_popis>F1 (RA) - JOIN ON</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F2</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                                    <link url="#D23">D23</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D7">D7</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D6">D6</link>
                                    <link url="#D34">D34</link>
                                    <link url="#D28">D28</link>
                                    <link url="#D25">D25</link>
                            </odkazy>
                            <kategorie_popis>F2 - NATURAL JOIN|JOIN USING</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F2R</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                                    <link url="#D23">D23</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D7">D7</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D6">D6</link>
                                    <link url="#D34">D34</link>
                            </odkazy>
                            <kategorie_popis>F2 (RA) - NATURAL JOIN|JOIN USING</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F3</kategorie>
                            <odkazy>
                                    <link url="#D24">D24</link>
                                    <link url="#D33">D33</link>
                            </odkazy>
                            <kategorie_popis>F3 - CROSS JOIN</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F4</kategorie>
                            <odkazy>
                                    <link url="#D27">D27</link>
                                    <link url="#D28">D28</link>
                            </odkazy>
                            <kategorie_popis>F4 - LEFT|RIGHT OUTER JOIN</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>F5</kategorie>
                            <odkazy>
                                    <link url="#D28">D28</link>
                            </odkazy>
                            <kategorie_popis>F5 - FULL (OUTER) JOIN</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G1</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                                    <link url="#D6">D6</link>
                                    <link url="#D34">D34</link>
                                    <link url="#D31">D31</link>
                                    <link url="#D32">D32</link>
                            </odkazy>
                            <kategorie_popis>G1 - Nested query in WHERE clause</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G1R</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                                    <link url="#D6">D6</link>
                                    <link url="#D34">D34</link>
                            </odkazy>
                            <kategorie_popis>G1 (RA) - Nested query in WHERE clause</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G2</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                                    <link url="#D23">D23</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D24">D24</link>
                                    <link url="#D19">D19</link>
                                    <link url="#D33">D33</link>
                            </odkazy>
                            <kategorie_popis>G2 - Nested query in FROM clause</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G2R</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                                    <link url="#D23">D23</link>
                                    <link url="#D21">D21</link>
                                    <link url="#D19">D19</link>
                            </odkazy>
                            <kategorie_popis>G2 (RA) - Nested query in FROM clause</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G3</kategorie>
                            <odkazy>
                                    <link url="#D25">D25</link>
                            </odkazy>
                            <kategorie_popis>G3 - Nested query in SELECT clause</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>G4</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                                    <link url="#D6">D6</link>
                                    <link url="#D34">D34</link>
                            </odkazy>
                            <kategorie_popis>G4 - Relative nested query (EXISTS|NOT EXISTS)</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>H1</kategorie>
                            <odkazy>
                                    <link url="#D23">D23</link>
                            </odkazy>
                            <kategorie_popis>H1 - Set unification - UNION</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>H2</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                                    <link url="#D7">D7</link>
                                    <link url="#D34">D34</link>
                            </odkazy>
                            <kategorie_popis>H2 - Set difference - MINUS or EXCEPT</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>H3</kategorie>
                            <odkazy>
                                    <link url="#D21">D21</link>
                            </odkazy>
                            <kategorie_popis>H3 - Set intersection - INTERSECT</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>I1</kategorie>
                            <odkazy>
                                    <link url="#D5">D5</link>
                                    <link url="#D24">D24</link>
                                    <link url="#D20">D20</link>
                                    <link url="#D37">D37</link>
                                    <link url="#D25">D25</link>
                            </odkazy>
                            <kategorie_popis>I1 - Aggregate functions (count|sum|min|max|avg)</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>I2</kategorie>
                            <odkazy>
                                    <link url="#D20">D20</link>
                            </odkazy>
                            <kategorie_popis>I2 - Aggregate function over grouped rows - GROUP BY (HAVING)</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>J</kategorie>
                            <odkazy>
                                    <link url="#D12">D12</link>
                            </odkazy>
                            <kategorie_popis>J - Same query in 3 different sql statements</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>K</kategorie>
                            <odkazy>
                                    <link url="#D20">D20</link>
                            </odkazy>
                            <kategorie_popis>K - All clauses in one query - SELECT FROM WHERE GROUP BY HAVING ORDER BY</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>L</kategorie>
                            <odkazy>
                                    <link url="#D29">D29</link>
                            </odkazy>
                            <kategorie_popis>L - View</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>M</kategorie>
                            <odkazy>
                                    <link url="#D30">D30</link>
                            </odkazy>
                            <kategorie_popis>M - Query over a view</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>N</kategorie>
                            <odkazy>
                                    <link url="#D33">D33</link>
                            </odkazy>
                            <kategorie_popis>N - INSERT, which insert a set of rows, which are the result of another subquery (an INSERT command which has VALUES clause replaced by a nested query.</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>O</kategorie>
                            <odkazy>
                                    <link url="#D32">D32</link>
                            </odkazy>
                            <kategorie_popis>O - UPDATE with nested SELECT statement</kategorie_popis>
                        </radek>
                        <radek>
                            <kategorie>P</kategorie>
                            <odkazy>
                                    <link url="#D31">D31</link>
                            </odkazy>
                            <kategorie_popis>P - DELETE with nested SELECT statement</kategorie_popis>
                        </radek>
            </pokryti_dotazu>
        </queries>
        <scripts>
            <title>Scripts</title>
            <para>
                <link url="./create.sql">create.sql</link>
            </para>
            <para>
                <link url="./insert.sql">insert.sql</link>
            </para>
        </scripts>
        <conclussions>
            <title>Conclusion</title>
                    <para>While working on my semester work, I have learned to be patient while waiting for checkpoints to be graded. I created project with my soul so much that I even filled in the data base myself. The most difficult thing for me was the creation of a conceptual scheme, it took the most nerves, effort and time.</para>
                    <para>Thoughts creep in about writing down BI-SQL.1 for myself in the future, but we&#039;ll see.</para>
                    <para>I express my gratitude to my mother, friends who inspires me. Especially I thank my comrade Kateryna S., who introduced me to anime «Death Parade».</para>
                    <para></para>
        </conclussions>
        <references>
            <title>References</title>
                    <para>[ 1 ]  Course pages DBS.*BI-DBS FIT ČVUT* [online]. FIT ČVUT, 2021, [cit. 20.2.2011]. Available here: https://courses.fit.cvut.cz/BI-DBS/</para>
                    <para></para>
                    <para>[ 2 ] HUNKA, Jiří: *Demo semester work  for working with PostgreSQL* [online]. FIT ČVUT, 2021, [cit. 24.4.2022]. Available here: https://users.fit.cvut.cz/~hunkajir/dbs2/main.xml</para>
                    <para></para>
                    <para>[ 3 ] QUAST, Karel: *Demo semester work  for working with Oracle* [online]. FIT ČVUT, 2017, [cit. 23.5.2017]. Available here: https://users.fit.cvut.cz/~hunkajir/dbs/main.xml</para>
                    <para></para>
                    <para>[ 4 ] The idea of database I have taken from anime «Death Parade». Available here: https://en.wikipedia.org/wiki/Death_Parade</para>
        </references>
    </content>
</sproject>
